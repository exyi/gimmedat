{% extends "layout.html.j2" %}
{% block body %}
<h1>Upload file(s)</h1>

<script>
    const INITIAL_REMAINING_SEC = {{ remaining_sec }}
    const LOAD_TIME = Date.now()
    const INITIAL_MAX_SIZE_BYTES = {{ maxsize_bytes }}
    let uploaded_bytes = 0

    function update_time_left() {
        let rem = document.getElementById("remaining")
        const seconds_remaining = Math.round(INITIAL_REMAINING_SEC - (Date.now() - LOAD_TIME) / 1000)
        const days = (seconds_remaining / (3600 * 24)) | 0
        const hours = ((seconds_remaining - days*3600*24) / 3600) | 0
        const minutes = ((seconds_remaining - days*3600*24 - hours*3600) / 60) | 0
        const seconds = ((seconds_remaining - days*3600*24 - hours*3600 - minutes*60)) | 0
        rem.innerText = `${days}d ${hours}h ${minutes}m ${seconds}s`
    }

    function update_bytes_left() {
        let bts = document.getElementById("bytes")
        
        const order = Math.log2(INITIAL_MAX_SIZE_BYTES - uploaded_bytes)
        const multiple = ((order / 10) | 0)
        const prefix = ['', 'Ki', 'Mi', 'Gi', 'Ti', 'Pi']
        const remaning_size_in_multiples = Math.round((INITIAL_MAX_SIZE_BYTES - uploaded_bytes) / Math.pow(2, 10*multiple) * 100) / 100

        if (multiple < prefix.length) {
            bts.innerText = `${remaning_size_in_multiples}${prefix[multiple]}B`
        } else {
            bts.innerText = "a ridiculous amount"
        }
    }
</script>


<p>Use this URL to upload up to <b><span id="bytes">{{ maxsize_bytes }} bytes</span></b> of data in as many files as you want.</p>
<p>You have <b><span id="remaining">{{ remaining_sec }} seconds</span> left</b> until this link expires.</p>

<div>
    <hr>
    <h3>File upload from browser</h3>
    <p>Select files you want to upload (can be more than one)</p>
    <input type="file" id="file" multiple/>
    <p id="status">No files selected...</p>
    <div id="overall" class="progressbar"><div>&nbsp;0/0</div></div>
    <div id="single-file" class="progressbar"><div>&nbsp;0/0</div></div>
</div>

<div>
    <hr>
    <h3>File upload with curl</h3>
    <pre><code>
    curl "{{ url }}" -T path/to/file/to/upload.ext
    </code></pre>
</div>

<div>
    <hr>
    <h3>Uploaded files</h3>
    <ul id="uploaded-files">
        {% for name in uploaded_files %}
        <li>{{ name }}</li>
        {% endfor %}
    </ul>
</div>

<script>
    /* update remaining time */
    update_bytes_left()
    update_time_left()
    setInterval(update_time_left, 1000)


    /* helper for uploading data */
    function makeRequest(method, url, blob, progressCallback) {
        return new Promise(function (resolve, reject) {
            let xhr = new XMLHttpRequest();
            xhr.open(method, url);
            xhr.onload = function () {
                if (this.status >= 200 && this.status < 300) {
                    resolve(xhr.response);
                } else {
                    reject({
                        status: this.status,
                        statusText: xhr.statusText,
                        message: xhr.responseText
                    });
                }
            };
            xhr.onerror = function () {
                reject({
                    status: this.status,
                    statusText: xhr.statusText
                });
            };
            xhr.upload.onprogress = function (ev) {
                progressCallback(ev.loaded, ev.total)
            }
            xhr.send(blob);
        });
    }
    
    const fileInput = document.getElementById("file")
    const status = document.getElementById("status")
    const uploadedFiles = document.getElementById("uploaded-files")

    fileInput.onchange = async (event) => {
        let files = fileInput.files
        let totalFiles = files.length;
        let processedFiles = 1;

        for (let f of files) {
            status.innerText = `Uploading file ${processedFiles}/${totalFiles}`

            const initial_uploaded_bytes = uploaded_bytes
            await makeRequest("PUT", `{{ url }}${f.name}`, f, (p,t) => {
                update_progressbar("overall", processedFiles, totalFiles)
                update_progressbar("single-file", p, t)
                uploaded_bytes = initial_uploaded_bytes + p
                update_bytes_left()
            }).catch((e) => {
                console.error("Error while uploading", f.name)
                console.log(e)
                alert(`Error while uploading ${f.name}: ${e.message}`)
            })

            processedFiles += 1;

            // add the file name to the list of uploaded files
            let node = document.createElement('li');
            node.appendChild(document.createTextNode(encodeURIComponent(f.name)));
            uploadedFiles.appendChild(node)
        }

        // at the end, set all status information to final
        status.innerText = `All ${totalFiles} files uploaded!`
        update_progressbar("overall", totalFiles, totalFiles)
        update_progressbar("single-file", 1, 1)

        // and reset file input
        fileInput.value = "";
    }
</script>
{% endblock %}
