{% extends "layout.html.j2" %}
{% block body %}
<h1>Upload file(s)</h1>
<p>Use this URL to upload up to <b><span id="bytes">{{ maxsize }}</span> bytes</b> of data in as many files as you want.</p>
<p>You have <b><span id="remaining">{{ remaining_sec }}</span> seconds left</b> until this link expires.</p>
<script>
    let remaining = document.getElementById("remaining")
    let remaining_sec = parseInt(remaining.innerText)
    setInterval(() => {
        remaining_sec--
        remaining.innerText = `${remaining_sec}`
    }, 1000)
</script>

<div>
    <hr>
    <h3>File upload with curl</h3>
    <pre><code>
    curl "{{ url }}" -T path/to/file/to/upload.ext
    </code></pre>
</div>

<div>
    <hr>
    <h3>File upload from browser</h3>
    <p>Select files you want to upload (can be more than one)</p>
    <input type="file" id="file" multiple/>
    <p id="status">No files selected...</p>
</div>

<div>
    <hr>
    <h3>Uploaded files</h3>
    <ul id="uploaded-files">
        {% for name in uploaded_files %}
        <li>{{ name }}</li>
        {% endfor %}
    </ul>
</div>

<!-- script for file upload -->
<script>
    function makeRequest(method, url, blob, progressCallback) {
        return new Promise(function (resolve, reject) {
            let xhr = new XMLHttpRequest();
            xhr.open(method, url);
            xhr.onload = function () {
                if (this.status >= 200 && this.status < 300) {
                    resolve(xhr.response);
                } else {
                    reject({
                        status: this.status,
                        statusText: xhr.statusText
                    });
                }
            };
            xhr.onerror = function () {
                reject({
                    status: this.status,
                    statusText: xhr.statusText
                });
            };
            xhr.upload.onprogress = function (ev) {
                progressCallback(ev.loaded, ev.total)
            }
            xhr.send(blob);
        });
    }
    
    

    let totalFiles = 0;
    let processedFiles = 1;
    let fileInput = document.getElementById("file")
    let status = document.getElementById("status")
    let bytes = document.getElementById("bytes")
    let uploadedFiles = document.getElementById("uploaded-files")

    fileInput.onchange = async (event) => {
        let files = fileInput.files
        totalFiles += files.length;
        for (let f of files) {
            status.innerText = `Uploading file ${processedFiles}/${totalFiles}`
            const prevSize = parseInt(bytes.innerText)
            
            await makeRequest("PUT", `{{ url }}${f.name}`, f, (p,t) => {
                status.innerText = `Uploading file ${processedFiles}/${totalFiles}, bytes ${p}/${t}`
                bytes.innerText = `${prevSize - p}`
            })

            processedFiles += 1;

            // add the file name to the list of uploaded files
            let node = document.createElement('li');
            node.appendChild(document.createTextNode(encodeURIComponent(f.name)));
            uploadedFiles.appendChild(node)
        }
        status.innerText = `All ${totalFiles} files uploaded!`
        fileInput.value = "";
    }
</script>
{% endblock %}
